// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/yjs.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	YJS_Test_FullMethodName             = "/yjs.YJS/Test"
	YJS_Close_FullMethodName            = "/yjs.YJS/Close"
	YJS_WebsocketMessage_FullMethodName = "/yjs.YJS/WebsocketMessage"
	YJS_SyncV1_FullMethodName           = "/yjs.YJS/SyncV1"
	YJS_Sync_FullMethodName             = "/yjs.YJS/Sync"
	YJS_RemoveClient_FullMethodName     = "/yjs.YJS/RemoveClient"
)

// YJSClient is the client API for YJS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type YJSClient interface {
	Test(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error)
	Close(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	WebsocketMessage(ctx context.Context, in *WebsocketMessageRequest, opts ...grpc.CallOption) (*WebsocketMessageResponse, error)
	SyncV1(ctx context.Context, in *SyncV1Request, opts ...grpc.CallOption) (*SyncV1Response, error)
	Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error)
	RemoveClient(ctx context.Context, in *RemoveClientRequest, opts ...grpc.CallOption) (*Empty, error)
}

type yJSClient struct {
	cc grpc.ClientConnInterface
}

func NewYJSClient(cc grpc.ClientConnInterface) YJSClient {
	return &yJSClient{cc}
}

func (c *yJSClient) Test(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TestResponse)
	err := c.cc.Invoke(ctx, YJS_Test_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yJSClient) Close(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, YJS_Close_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yJSClient) WebsocketMessage(ctx context.Context, in *WebsocketMessageRequest, opts ...grpc.CallOption) (*WebsocketMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WebsocketMessageResponse)
	err := c.cc.Invoke(ctx, YJS_WebsocketMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yJSClient) SyncV1(ctx context.Context, in *SyncV1Request, opts ...grpc.CallOption) (*SyncV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncV1Response)
	err := c.cc.Invoke(ctx, YJS_SyncV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yJSClient) Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncResponse)
	err := c.cc.Invoke(ctx, YJS_Sync_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yJSClient) RemoveClient(ctx context.Context, in *RemoveClientRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, YJS_RemoveClient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// YJSServer is the server API for YJS service.
// All implementations must embed UnimplementedYJSServer
// for forward compatibility.
type YJSServer interface {
	Test(context.Context, *TestRequest) (*TestResponse, error)
	Close(context.Context, *Empty) (*Empty, error)
	WebsocketMessage(context.Context, *WebsocketMessageRequest) (*WebsocketMessageResponse, error)
	SyncV1(context.Context, *SyncV1Request) (*SyncV1Response, error)
	Sync(context.Context, *SyncRequest) (*SyncResponse, error)
	RemoveClient(context.Context, *RemoveClientRequest) (*Empty, error)
	mustEmbedUnimplementedYJSServer()
}

// UnimplementedYJSServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedYJSServer struct{}

func (UnimplementedYJSServer) Test(context.Context, *TestRequest) (*TestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test not implemented")
}
func (UnimplementedYJSServer) Close(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (UnimplementedYJSServer) WebsocketMessage(context.Context, *WebsocketMessageRequest) (*WebsocketMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebsocketMessage not implemented")
}
func (UnimplementedYJSServer) SyncV1(context.Context, *SyncV1Request) (*SyncV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncV1 not implemented")
}
func (UnimplementedYJSServer) Sync(context.Context, *SyncRequest) (*SyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedYJSServer) RemoveClient(context.Context, *RemoveClientRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveClient not implemented")
}
func (UnimplementedYJSServer) mustEmbedUnimplementedYJSServer() {}
func (UnimplementedYJSServer) testEmbeddedByValue()             {}

// UnsafeYJSServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to YJSServer will
// result in compilation errors.
type UnsafeYJSServer interface {
	mustEmbedUnimplementedYJSServer()
}

func RegisterYJSServer(s grpc.ServiceRegistrar, srv YJSServer) {
	// If the following call pancis, it indicates UnimplementedYJSServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&YJS_ServiceDesc, srv)
}

func _YJS_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YJSServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: YJS_Test_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YJSServer).Test(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YJS_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YJSServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: YJS_Close_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YJSServer).Close(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _YJS_WebsocketMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebsocketMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YJSServer).WebsocketMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: YJS_WebsocketMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YJSServer).WebsocketMessage(ctx, req.(*WebsocketMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YJS_SyncV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YJSServer).SyncV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: YJS_SyncV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YJSServer).SyncV1(ctx, req.(*SyncV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _YJS_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YJSServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: YJS_Sync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YJSServer).Sync(ctx, req.(*SyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YJS_RemoveClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YJSServer).RemoveClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: YJS_RemoveClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YJSServer).RemoveClient(ctx, req.(*RemoveClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// YJS_ServiceDesc is the grpc.ServiceDesc for YJS service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var YJS_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yjs.YJS",
	HandlerType: (*YJSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Test",
			Handler:    _YJS_Test_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _YJS_Close_Handler,
		},
		{
			MethodName: "WebsocketMessage",
			Handler:    _YJS_WebsocketMessage_Handler,
		},
		{
			MethodName: "SyncV1",
			Handler:    _YJS_SyncV1_Handler,
		},
		{
			MethodName: "Sync",
			Handler:    _YJS_Sync_Handler,
		},
		{
			MethodName: "RemoveClient",
			Handler:    _YJS_RemoveClient_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/yjs.proto",
}
